@page "/inventorymanagement/customer"
@rendermode InteractiveServer
@using Application.Models.Inventory
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Customer View</PageTitle>

<div>
    <h1>Current Stock</h1>
    <QuickGrid Items="items.AsQueryable()">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Quantity)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Cost)" Sortable="true" />
    </QuickGrid>
</div>

<div>
    <h1>Orders</h1>
    <QuickGrid Items="orders.AsQueryable()">
        <PropertyColumn Property="@(p => p.CustomerName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Items)" Sortable="true" />
        <PropertyColumn Property="@(p => p.OrderDate)" Sortable="true" />
    </QuickGrid>
    @if (!addingOrder)
    {
        <button type="submit" @onclick="AddOrderButton">Add Order</button>
    }
    else
    {
        <EditForm Model="order1" OnValidSubmit="AddOrder">
            @* <DataAnnotationsValidator /> *@

            <table class="table">
                <tbody>
                    <tr>
                        <td>
                            <InputText id="name" class="form-control" placeholder="Name" @bind-Value="order1.CustomerName" />
                            @* <ValidationMessage For="@(() => toDoItem.Name)" /> *@
                        </td>

                        @* <td>
                            <InputNumber id="quantity" class="form-control" placeholder="Quantity" @bind-Value="order1.Items" />
                            <ValidationMessage For="@(() => toDoItem.Description)" />
                        </td> *@

                        <td>
                            <InputDate id="cost" class="form-control" placeholder="Cost" Type="InputDateType.DateTimeLocal" @bind-Value="order1.OrderDate" />
                            @* <ValidationMessage For="@(() => toDoItem.Description)" /> *@
                        </td>
                    </tr>
                </tbody>
            </table>

            <button type="submit" class="btn btn-success mb-3">Submit Order</button>
            <button type="submit" @onclick="AddOrderButton" class="btn btn-success mb-3">Cancel</button>
        </EditForm>
    }
</div>


@code {
    public List<Item> items = new List<Item> 
        {
            new Item(0, "Apple", 10, 2),
            new Item(1, "Stick", 10, 1),
            new Item(2, "Sword", 10, 5),
            new Item(3, "Mud", 10, 1),
            new Item(4, "Potato", 10, 2.5f),
            new Item(5, "Rope", 10, 6.25f),
            new Item(6, "Rock", 10, .5f),
            new Item(7, "Broken Sword", 10, 2.5f),
            new Item(8, "Healing Juice", 10, 8.60f),
            new Item(9, "Gold", 10, 15.75f),
            new Item(10, "Golden Stick", 10, 30.67f),
        };

    public List<Order> orders = new();
    public Order order1 = new();
    public bool addingOrder = false;

    public void AddOrderButton()
    {
        @* creatingToDoItem = true; *@
        if(!addingOrder)
        {
            addingOrder = true;
        }
        else
        {
            addingOrder = false;
        }
    }

    public void AddOrder()
    {
        if (orders.Any() && orders.Last() != null)
        {
            order1.Id = orders.Last().Id + 1;
        }
        
        orders.Add(order1);
        order1 = new();
        addingOrder = false;
    }

    protected override void OnInitialized()
    {
        RandomizeItemValues();
    }

    public void RandomizeItemValues()
    {
        Random random = new Random();
        random.Next(0,30);
        // Could make each item outside of this but for now its fine
        foreach(var item in items)
        {
            item.Quantity = random.Next(0,30);
            var randomCost = (float) random.NextDouble() * (31 - .5f) + .5f;
            item.Cost = (float) Math.Round(randomCost, 2);
        }

        //TODO interesting way to shuffle found online
        items = items.OrderBy(i => Guid.NewGuid()).ToList();
    }
}