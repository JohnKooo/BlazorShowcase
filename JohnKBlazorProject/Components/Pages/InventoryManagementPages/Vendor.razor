@page "/inventorymanagement/vendor"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using JohnKBlazorProject.Models;
@using JohnKBlazorProject.Models.Inventory;

<PageTitle>Vendor View</PageTitle>

<div>
    <h1>Current Stock</h1>
    <QuickGrid Items="items.AsQueryable()">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Quantity)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Cost)" Sortable="true" />
    </QuickGrid>

    @if (!addingItem)
    {
        <button type="submit" @onclick="AddItemButton">Add New Item</button>
    }
    else
    {
        <EditForm Model="item1" OnValidSubmit="AddItem">
            @* <DataAnnotationsValidator /> *@

            <table class="table">
                <tbody>
                    <tr>
                        <td>
                            <InputText id="name" class="form-control" placeholder="Name" @bind-Value="item1.Name" />
                            @* <ValidationMessage For="@(() => toDoItem.Name)" /> *@
                        </td>

                        <td>
                            <InputNumber id="quantity" class="form-control" placeholder="Quantity" @bind-Value="item1.Quantity" />
                            @* <ValidationMessage For="@(() => toDoItem.Description)" /> *@
                        </td>

                        <td>
                            <InputNumber id="cost" class="form-control" placeholder="Cost" @bind-Value="item1.Cost" />
                            @* <ValidationMessage For="@(() => toDoItem.Description)" /> *@
                        </td>
                    </tr>
                </tbody>
            </table>

            <button type="submit" class="btn btn-success mb-3">Add Item</button>
            <button type="submit" @onclick="AddItemButton" class="btn btn-success mb-3">Cancel</button>
        </EditForm>
    }
</div>

@code {
    public List<Item> items = new List<Item> 
        {
            new Item(0, "Apple", 10, 2),
            new Item(1, "Stick", 10, 1),
            new Item(2, "Sword", 10, 5),
            new Item(3, "Mud", 10, 1),
            new Item(4, "Potato", 10, 2.5f),
            new Item(5, "Rope", 10, 6.25f),
            new Item(6, "Rock", 10, .5f),
            new Item(7, "Broken Sword", 10, 2.5f),
            new Item(8, "Healing Juice", 10, 8.60f),
            new Item(9, "Gold", 10, 15.75f),
            new Item(10, "Golden Stick", 10, 30.67f),
        };
    public Item item1 = new();
    public bool addingItem = false;

    public void AddItemButton()
    {
        @* creatingToDoItem = true; *@
        if(!addingItem)
        {
            addingItem = true;
        }
        else
        {
            addingItem = false;
        }
    }

    public void AddItem()
    {
        if (items.Any() && items.Last() != null)
        {
            item1.Id = items.Last().Id + 1;
        }
        
        items.Add(item1);
        item1 = new();
        addingItem = false;
    }

    protected override void OnInitialized()
    {
        RandomizeItemValues();
    }

    public void RandomizeItemValues()
    {
        Random random = new Random();
        random.Next(0,30);
        // Could make each item outside of this but for now its fine
        foreach(var item in items)
        {
            item.Quantity = random.Next(0,30);
            var randomCost = (float) random.NextDouble() * (31 - .5f) + .5f;
            item.Cost = (float) Math.Round(randomCost, 2);
        }

        //TODO interesting way to shuffle found online
        items = items.OrderBy(i => Guid.NewGuid()).ToList();
    }
}
